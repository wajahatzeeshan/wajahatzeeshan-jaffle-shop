
# Name your project! Project names should contain only lowercase characters
# and underscores. A good package name should reflect your organization's
# name or the intended use of these models
name: 'jaffle_shop'
version: '1.0.0'
config-version: 2
# This section is used to configure the dbt Cloud environment.
# The `dbt-cloud` key is used to specify the project ID in dbt Cloud
# which is necessary for dbt Cloud to recognize and manage this project.
# The project ID is unique to your dbt Cloud project and is used to link
# this dbt project with the corresponding dbt Cloud project.
# You can find your project ID in the dbt Cloud UI under the project settings.
# The project ID is typically a numeric value and is essential for dbt Cloud
# to correctly associate this project with the dbt Cloud environment.
# For example, if your dbt Cloud project ID is 70471823488018,
# you would set it as follows:
dbt-cloud:
  project-id: 70471823488018
# This allows dbt Cloud to manage the project, run jobs, and access the necessary resources
# associated with this project.
# Note: The project ID is sensitive information and should be kept secure.


# This setting configures which "profile" dbt uses for this project.
profile: 'default'

# These configurations specify where dbt should look for different types of files.
# The `model-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
model-paths: ["models"]
analysis-paths: ["analyses"]
test-paths: ["tests"]
seed-paths: ["seeds"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

target-path: "target"  # directory which will store compiled SQL files
clean-targets:         # directories to be removed by `dbt clean`
  - "target"
  - "dbt_packages"


# Configuring models
# Full documentation: https://docs.getdbt.com/docs/configuring-models

# In dbt, the default materialization for a model is a view. This means, when you run 
# dbt run or dbt build, all of your models will be built as a view in your data platform. 
# The configuration below will override this setting for models in the example folder to 
# instead be materialized as tables. Any models you add to the root of the models folder will 
# continue to be built as views. These settings can be overridden in the individual model files
# using the `{{ config(...) }}` macro.

models:
  jaffle_shop:
    # Applies to all files under models/marts/
    marts:
      +materialized: table
      finance:
        fct_orders:
          +tags: ["finance", "payments"]
    staging:
      +materialized: view
